/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.comma
import category_theory.elements
import category_theory.filtered
import category_theory.limits.shapes.finite_limits
import category_theory.limits.shapes.types
import category_theory.limits.presheaf
import category_theory.limits.filtered_colimit_commutes_finite_limit2
import category_theory.limits.preserves.limits
import category_theory.limits.preserves.shapes.terminal
import category_theory.limits.preserves.shapes.binary_products
import category_theory.limits.preserves.shapes.equalizers

/-!
# Flat functors

A typeclass for functors which are flat.
-/

universes w v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace category_theory
open opposite limits

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

/-- The functor `F : C ‚•§ Type` is set-valued flat iff its category of elements is cofiltered. -/
abbreviation is_set_flat (F : C ‚•§ Type w) := is_filtered F.elements·µí·µñ

/--
The functor `F : C ‚•§ D` is flat iff, for each `d` in `D`, the composite `C ‚ü∂ D ‚ü∂ Type v‚ÇÇ` given
by `F ‚ãô coyoneda.obj d` is set-valued flat.
Note that if `C` does not have finite limits, this can be in general stronger than `F : C ‚•§ Type w`
being set-valued flat.
-/
abbreviation is_flat (F : C ‚•§ D) := ‚àÄ (d : D), is_set_flat (F ‚ãô coyoneda.obj (op d))

variables (F : C ‚•§ D) (d : D)

-- def equiv_set_flat :
--   comma (functor.from_punit d) F ‚âå (F ‚ãô coyoneda.obj (op d)).elements :=
-- equivalence.mk
--   { obj := Œª p, ‚ü®p.right, p.hom‚ü©,
--     map := Œª p‚ÇÅ p‚ÇÇ Œ±, ‚ü®Œ±.right, Œ±.w.symm.trans (category.id_comp _)‚ü© }
--   { obj := Œª p,
--     { left := punit.star, right := p.1, hom := p.2 },
--     map := Œª _ _ Œ±,
--     { left := eq_to_hom rfl, right := Œ±.1, w' := eq.trans (category.id_comp _) Œ±.2.symm, } }
--   (nat_iso.of_components (Œª p, eq_to_iso (by { cases p, tidy })) (by { rintro ‚ü®‚ü© ‚ü®‚ü©, tidy }))
--   (nat_iso.of_components (Œª p, eq_to_iso (by tidy)) (by tidy))

/--
Prop 6.1.2 (1) => (2) of (Borceux)
-/
def set_flat_of_preserves_finite_limits [has_finite_limits.{v‚ÇÅ} C] (F : C ‚•§ Type v‚ÇÅ)
  [‚àÄ (J : Type v‚ÇÅ) [ùí• : small_category J] [@fin_category J ùí•],
      @preserves_limits_of_shape _ _ _ _ J ùí• F] :
  is_set_flat F :=
{ nonempty := ‚ü®op ‚ü®‚ä§_ C, (is_limit_of_has_terminal_of_preserves_limit F).from punit punit.star‚ü©‚ü©,
  cocone_objs := Œª X Y,
  begin
    refine ‚ü®op ‚ü®X.unop.1 ‚®Ø Y.unop.1, _‚ü©, _, _, ‚ü®‚ü©‚ü©,
    { apply (((types.binary_product_iso_prod.app _).app _).hom ‚â´
                  inv (prod_comparison F X.unop.1 Y.unop.1)) ‚ü®X.unop.2, Y.unop.2‚ü© },
    { refine has_hom.hom.op (_ : _ ‚ü∂ unop X),
      refine ‚ü®limits.prod.fst, _‚ü©,
      dsimp only,
      rw [‚Üê types_comp_apply _ (F.map _), category.assoc, inv_prod_comparison_map_fst],
      simp [-types_comp_apply] },
    { refine has_hom.hom.op (_ : _ ‚ü∂ unop Y),
      refine ‚ü®limits.prod.snd, _‚ü©,
      dsimp only,
      rw [‚Üê types_comp_apply _ (F.map _), category.assoc, inv_prod_comparison_map_snd],
      simp [-types_comp_apply] },
  end,
  cocone_maps := Œª X Y f g,
  begin
    refine ‚ü®op ‚ü®equalizer f.unop.1 g.unop.1, _‚ü©, _, _‚ü©,
    { apply inv (equalizer_comparison f.unop.1 g.unop.1 F) _,
      apply (types.equalizer_limit.is_limit.cone_point_unique_up_to_iso (limit.is_limit _)).hom,
      refine ‚ü®Y.unop.2, _‚ü©,
      rw [f.unop.2, g.unop.2] },
    { refine has_hom.hom.op (_ : _ ‚ü∂ unop Y),
      refine ‚ü®equalizer.Œπ _ _, _‚ü©,
      dsimp only,
      rw [‚Üê types_comp_apply _ (inv (equalizer_comparison f.unop.val g.unop.val F)),
          ‚Üê types_comp_apply _ (F.map (equalizer.Œπ f.unop.val g.unop.val)), category.assoc,
          inv_equalizer_comparison_comp_map],
      simp [-types_comp_apply] },
    { apply has_hom.hom.unop_inj,
      apply subtype.ext,
      apply equalizer.condition }
  end }.

@[simps {rhs_md := semireducible}]
def my_functor (F : C ‚•§ Type v‚ÇÅ) : F.elements·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ :=
functor.op (category_of_elements.œÄ F) ‚ãô coyoneda

@[simps]
def alt_cocone (F : C ‚•§ Type v‚ÇÅ) :
  cocone (my_functor F) :=
{ X := F,
  Œπ :=
  { app := Œª p,
    { app := Œª Y f, F.map f p.unop.2,
      naturality' := Œª Y‚ÇÅ Y‚ÇÇ g,
      begin
        ext f,
        apply functor_to_types.map_comp_apply F f g,
      end },
    naturality' := Œª p‚ÇÅ p‚ÇÇ Œ±,
    begin
      ext X x,
      change F.map (Œ±.unop.1 ‚â´ x) _ = F.map _ _,
      rw [functor_to_types.map_comp_apply F, Œ±.unop.2],
    end } }

def alt_colimit (F : C ‚•§ Type v‚ÇÅ) :
  is_colimit (alt_cocone F) :=
{ desc := Œª s,
  { app := Œª X t, (s.Œπ.app (op ‚ü®X, t‚ü©)).app _ (ùüô _),
    naturality' :=
    begin
      intros X Y f,
      ext t,
      let X' : F.elements·µí·µñ := op ‚ü®X, t‚ü©,
      let Y' : F.elements·µí·µñ := op ‚ü®Y, F.map f t‚ü©,
      let f' : Y' ‚ü∂ X' := has_hom.hom.op ‚ü®_, rfl‚ü©,
      change (s.Œπ.app Y').app _ (ùüô Y) = s.X.map f ((s.Œπ.app X').app _ _),
      rw ‚Üê s.w f',
      change (s.Œπ.app X').app Y (f ‚â´ ùüô Y) = ((s.Œπ.app X').app X ‚â´ s.X.map f) (ùüô X),
      rw category.comp_id,
      rw ‚Üê (show _ = (s.Œπ.app X').app X ‚â´ s.X.map f, from (s.Œπ.app X').naturality f),
      change _ = (s.Œπ.app X').app Y (ùüô X ‚â´ f),
      rw category.id_comp f,
    end },
  fac' := Œª s j,
  begin
    op_induction j,
    cases j with X x,
    ext Y f,
    let X' : F.elements·µí·µñ := op ‚ü®X, x‚ü©,
    let Y' : F.elements·µí·µñ := op ‚ü®Y, F.map f x‚ü©,
    let f' : Y' ‚ü∂ X' := has_hom.hom.op ‚ü®_, rfl‚ü©,
    change (s.Œπ.app Y').app Y (ùüô Y) = (s.Œπ.app X').app Y f,
    rw ‚Üê s.w f',
    dsimp,
    simp,
  end,
  uniq' :=  Œª s m w,
  begin
    ext X x,
    change m.app X x = (s.Œπ.app (op ‚ü®X, x‚ü©)).app X (ùüô X),
    rw ‚Üê w (op ‚ü®X, x‚ü©),
    dsimp,
    simp,
  end }

set_option pp.universes true

-- F : C.{v u} => Type w
-- F.elements : homs in v, objs in max u w
-- max u w = w
def preserves_finite_limits_of_set_flat {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
  [has_finite_limits C] (F : C ‚•§ Type v‚ÇÅ)
[is_set_flat F] (J : Type v‚ÇÅ) [category.{w} J] [fin_category J] :
preserves_limits_of_shape J F :=
{ preserves_limit := Œª K,
  { preserves := Œª c t,
    begin
      let Œì : F.elements·µí·µñ ‚•§ J ‚•§ Type v‚ÇÅ :=
        (category_of_elements.œÄ F).op ‚ãô coyoneda ‚ãô (whiskering_left J C _).obj K,
      -- have := alt_colimit F,
      -- have := F.elements·µí·µñ,
      have := @filtered_colimit_finite_limit_iso _ _ _ _ Œì,
      -- let Œì : F.elements·µí·µñ √ó J ‚•§ Type v‚ÇÅ := (category_of_elements.œÄ F).op.prod K ‚ãô functor.hom C,

      -- apply functor.prod _ _ ‚ãô functor.hom C,
      -- have : has_colimits_of_shape (F.elements·µí·µñ) (Type v‚ÇÅ),

      -- have := alt_colimit F,
      -- have := colimit (my_functor F),
      -- have := category_theory.limits.functor_category_has_colimits_of_shape,

      -- let X := limit (K ‚ãô F),
      -- let Œ∏ := functor.op (category_of_elements.œÄ F),
      -- have := colimit_limit_to_limit_colimit,

      -- let F' := (op_op_equivalence C).functor ‚ãô F,
      -- have := colimit_of_representable F',
      -- have := colimit_of_representable,
    end } }

-- def is_set_flat_of_is_flat (F : C ‚•§ Type w) [is_flat F] : is_set_flat F :=
-- begin
--   change is_filtered _,

-- end

-- { functor :=
--   { obj := Œª p, ‚ü®p.right, p.hom‚ü©,
--     map := Œª p‚ÇÅ p‚ÇÇ Œ±, ‚ü®Œ±.right, Œ±.w.symm.trans (category.id_comp _)‚ü© },
--   inverse :=
--   { obj := Œª p,
--     { left := punit.star, right := p.1, hom := p.2 },
--     map := Œª p‚ÇÅ p‚ÇÇ Œ±,
--     { left := eq_to_hom rfl, right := Œ±.1, w' := eq.trans (category.id_comp _) Œ±.2.symm, } },
--   unit_iso :=
--   begin
--     refine nat_iso.of_components _ _,
--     { intro p,
--       apply comma.iso_mk _ _ _,
--       { apply eq_to_iso _,
--         apply subsingleton.elim },
--       { apply iso.refl _ },
--       { tidy },
--     },
--     { intros p‚ÇÅ p‚ÇÇ Œ±,
--       ext,
--       simp }
--   end,
--   counit_iso := nat_iso.of_components (Œª p, eq_to_iso (by tidy)) (by tidy) }

lemma is_filtered_of_equiv (h : C ‚âå D)
[hC : is_filtered C] : is_filtered D :=
{
  cocone_objs :=
  Œª X Y, let ‚ü®Z,f,g,_‚ü© :=
  is_filtered_or_empty.cocone_objs (h.inverse.obj X) (h.inverse.obj Y) in
  ‚ü®h.functor.obj Z,(h.counit_inv.app X) ‚â´ (h.functor.map f),(h.counit_inv.app Y)
  ‚â´ (h.functor.map g),trivial‚ü©,
  cocone_maps := Œª X Y f g,
  let ‚ü®Z,z,zz‚ü© :=
  is_filtered_or_empty.cocone_maps (h.inverse.map f) (h.inverse.map g) in
  ‚ü®h.functor.obj Z,(h.counit_inv.app Y) ‚â´ (h.functor.map z),sorry‚ü©,
  nonempty := nonempty.map h.functor.obj hC.nonempty
}

lemma is_filtered_of (T : C) (hT : is_terminal T) :
is_filtered C :=
{ cocone_objs := Œª X Y, ‚ü®T,hT.from X,hT.from Y,trivial‚ü©,
  cocone_maps := Œª X Y f g, ‚ü®T,hT.from Y,hT.hom_ext _ _‚ü©,
  nonempty := ‚ü®T‚ü© }

def elements.initial2 (A : C) : (coyoneda.obj (op A)).elements :=
‚ü®A, ùüô _‚ü©

def is_initial2 (A : C) : is_initial (elements.initial2 A) :=
{ desc := Œª s, ‚ü®s.X.2, category.id_comp _‚ü©,
  uniq' := Œª s m w,
  begin
    simp_rw ‚Üê m.2,
    dsimp [elements.initial2],
    simp,
  end }

lemma representable_is_set_flat (U : C) :
is_filtered (coyoneda.obj(op U)).elements·µí·µñ :=
is_filtered_of (op (elements.initial2 U)) (terminal_op_of_initial (is_initial2 U))

end category_theory
